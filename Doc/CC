########################################################################################
AddOn=false
AddOn=true    ## for builtins: let, kill

########################################################################################
OptimizationOpts=()
OptimizationOpts=(-O2)

LangOpts=(
  -m32
  '-std=c99'
)

LangOpts=(
  #-m32
  '-std=gnu99'
  -m64
)

CommonOpts = ($LangOpts $OptimizationOpts)

########################################################################################
SecurityCompileOpts=(
  -fPIE
  #-fstack-protector   ## does not work on older systems
)

SecurityLinkOpts=(
  -pie 
  -Wl,-z,now,-z,relro   ## a single option / no spaces 
)

########################################################################################
RegularCompileOpts=(
  ## -DYYDEBUG'='1  ## To compile parsers with debug. At run time define env variable 'YYDEBUG=1'
  -DHAVE_CONFIG_H
  -I.
  -Wall
  -g  
  -MD
  -MP
)
RegularLinkOpts=(
  -Wall
  -g
)

########################################################################################
CompileOpts = (
  $CommonOpts
  $RegularCompileOpts
  $SecurityCompileOpts
)
LinkOpts=(
  $CommonOpts
  $RegularLinkOpts
  $SecurityLinkOpts
)

########################################################################################
if (clang --version >/dev/null >[2]/dev/null) {
  COMPILER=clang
} else {
  COMPILER=gcc
}

########################################################################################
########################################################################################
fn CompileWithOpts LinkWithOpts { cmd=() securityOpts=() allOpts=() {
  #--------------------------------------------------------------------
  if (~ $0 LinkWithOpts) {
    allOpts = ($LinkOpts)
  } else {
    allOpts = ($CompileOpts)
  }
  #--------------------------------------------------------------------
  ### gcc $opts -DHAVE_CONFIG_H -I.    -fPIE  -fstack-protector -Wall -g $OptimizationOpts -MT $f.o -MD -MP -MF .deps/$f.Tpo -c -o $f.o $f.c

  cmd = ($COMPILER $allOpts $*)
  echo $cmd
  $cmd
}}

########################################################################################
fn Compile LinkOneObj { f=$1 {
  if (~ $0 Compile) {
    #CompileWithOpts -DHAVE_CONFIG_H -I.    -Wall -g  -MT $f.o -MD -MP -MF .deps/$f.Tpo -c -o $f.o $f.c
    CompileWithOpts   -MT $f.o -MF .deps/$f.Tpo -c -o $f.o $f.c
  } else {
    LinkWithOpts      -o $f $f.o  
  }
}}

########################################################################################
########################################################################################


########################################################################################
for (s in mksignal mkstatval) {
  Compile $s
  LinkOneObj $s
}

## Signal names for sigmsgs.c, must be done before compiling rc
./mksignal

## Status value defines, must be done before compiling rc
## Making mkstatval does not depend on singals created by mksignal
./mkstatval > statval.h

########################################################################################
## CompileWithOpts rc source
sources=()

if ($AddOn) {
  sources=($sources addon)
}
sources=(
  $sources
  builtins
  except
  exec
  fn
  footobar
  getopt
  glob
  glom
  hash
  heredoc
  input
)

if ($AddOn) {
  sources=($sources let.tab)
}

sources=(
  $sources
  lex
  list
  main
  match
  nalloc
  open
  parse
  print
  redir
  signal
  status
  tree
  utils
  var
  wait
  walk
  which
  sigmsgs
  edit-null
  system
)


########################################################################################
## Link rc
rc_objs = $sources^.o

########################################################################################
for (s in $sources) {
  Compile $s
}
LinkWithOpts -o rc     $rc_objs

########################################################################################
## Make test (trip)
Compile tripping
LinkOneObj tripping


