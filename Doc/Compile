#! /usr/bin/env rc

########################################################################################
# rc script to compile self.
########################################################################################
fn Error { echo >[1=2] $* }
fn Fatal { Error $*; exit 1 }

########################################################################################
objDir = ./obj
FORCE_CLANG = false
FORCE_GCC = false
# DESCRIPTION = $(git describe || echo '(git description unavailable)')

Clobber = true 
Yydebug = true
Fortify = 2
CheckTime = false
Sanitize = false
Offset = false
ScanCmd = ()
Edit = null

while (! ~ $#* 0) {
    switch(x$1) {
    case x-force-clang  x--force-clang x-clang x--clang
        FORCE_CLANG = true
    case x-force-gcc    x--force-gcc   x-gcc   x--gcc
        FORCE_GCC = true

    case x-noclob* x--noclob*
        Clobber = false

    case x-yydebug x--yydebug
        Yydebug = true
        
    case x-no-yydebug x--no-yydebug x-noyydebug x--noyydebug
        Yydebug = false
        
    case x--check_time x--check-time
        CheckTime = true

    case x--opt 
        if (~ $#* 0 1) {
            Fatal Option $1 needs value
        }
        OPT = $2
        shift

    case x--fortify
        if (~ $#* 0 1) {
            Fatal Option $1 needs value
        }
        Fortify = $2
        shift

    case x--sanitize
        Sanitize = true

    case x--offset
        Offset = true

    case x--scan
        ScanCmd = scan-build

    case x--edit
        Edit = edit
    case x--readline x--read
        Edit = readline
    case x--editline
        Edit = editline
    case x--vrl
        Edit = vrl

    case x-*
        Fatal Bad option $1
    case *
        break
    }
    shift
}

########################################################################################
AddOn = false
AddOn = true    ## for builtins: calc, kill

########################################################################################
# Standard options
if (~ $OPT ()) {
    OptimizationOpts = ()
    OptimizationOpts = (-O2)
    OptimizationOpts = (-O3)
} else {
    OptimizationOpts = (-O$OPT)
}
if (~ $OPT 0) {
    Fortify = ()
}

LangOpts = (
    -m32
    '-std=c99'
)

LangOpts = (
    #-m32
    '-std=gnu99'
    -m64
)

CommonOpts = (
    $LangOpts
    $OptimizationOpts
)

########################################################################################
# Security options (stack randomization, etc.)
SecurityCompileOpts = (
    -fPIE
    ## -fstack-protector does not work on older systems (e.g., RedHat 4, 5)
    -fstack-protector
)
if (! ~ $#Fortify 0) {
    SecurityCompileOpts = (
        $SecurityCompileOpts
        '-D_FORTIFY_SOURCE='$Fortify
    )
}

SecurityLinkOpts = (
    -pie 
    -Wl   ## a single option / no spaces 
)

########################################################################################
# Other options
RegularCompileOpts = (
    -DHAVE_CONFIG_H
    -I.
    -g  
    -MD
    -MP

    -Wall
    -pedantic
    # -ansi  ## ansi implies NO_POSIX which in turn implies no sigjmp_buf
    -Wextra -W  ## these options create 'unused param' and 'longjmp clobber variable' warnings
    -Wno-unused-parameter
    # -Werror  ## makes warnings errors
)
if ($Yydebug) {
    RegularCompileOpts = (
        $RegularCompileOpts
        '-DYYDEBUG=1'  ## To compile parsers with debug. In addition at run time must define env variable 'YYDEBUG=1'
    )
}

RegularLinkOpts = (
    -Wall
    -g
)

########################################################################################
# All compile and link options together
CompileOpts = (
    $CommonOpts
    $RegularCompileOpts
    $SecurityCompileOpts
)

LinkOpts = (
    $CommonOpts
    $RegularLinkOpts
    $SecurityLinkOpts
)

########################################################################################
# Clobbering by setjmp/longjmp
if ($Clobber) {
    Clobbered = (
        -Wclobbered
    )
}
if ($FORCE_CLANG) {
    COMPILER = clang
} else if ($FORCE_GCC) {
    COMPILER = gcc
} else if (whatis clang >[2]/dev/null) {
    COMPILER = clang
} else {
    if (~ $CC ()) {
        COMPILER = gcc
    } else {
        COMPILER = $CC
    }
}
whatis $COMPILER
$COMPILER --version

########################################################################################
if ($Sanitize) {
    CompileOpts = (
        $CompileOpts
        -fsanitize=undefined
        #-fsanitize=address ## these two sanitize flags have problem in linking
        #-fsanitize=integer
    )
    LinkOpts = (
        $LinkOpts
        -lubsan
    )
}
if (~ $COMPILER clang) {
    Offset = true
}
if ($Offset) {
    CompileOpts = (
        $CompileOpts
        -Wno-extended-offsetof
    )
}

if (~ $COMPILER clang) {
    CompileOpts = (
        $CompileOpts
    )
    LinkOpts = (
        $LinkOpts
    )
} else {
    CompileOpts = (
        $CompileOpts
        $Clobbered
    )
}

STATUS = 0
########################################################################################
# Store object files in a subdir to prevent polution
if (! ~ $#objDir 0 && ! test -d $objDir) {
    mkdir -p $objDir
}
########################################################################################
########################################################################################
fn CompileWithOpts LinkWithOpts { cmd = () securityOpts = () allOpts = () {
    #--------------------------------------------------------------------
    if (~ $0 LinkWithOpts) {
        allOpts = ($LinkOpts)
    } else {
        allOpts = ($CompileOpts)
    }
    #--------------------------------------------------------------------
    cmd = ($ScanCmd $COMPILER $allOpts $*)
    echo $cmd
    $cmd
    if (! ~ $status 0) {
        STATUS = $status
    }
}}

########################################################################################
fn Compile LinkOneObj { f = $1 obj = () {
    if (~ $objDir ()) {
        obj = $f.o
        exe = $f
    } else {
        obj = $objDir/$f.o
        if (~ $f *tripping*) {
            exe = $f
        } else {
            exe = $objDir/$f
        }
    }
    #--------------------------------------------------------------------
    if (~ $0 Compile) {
        if ({! $CheckTime} || {! test $obj -nt $f.c -a $obj -nt rc.h}) {
            CompileWithOpts   -MT $obj -MF .deps/$f.Tpo -c -o $obj $f.c
        }
    } else {
        if ({! $CheckTime} || {test $obj -nt $exe}) {
            LinkWithOpts      -o $exe $obj  
        }
    }
}}

########################################################################################
########################################################################################


########################################################################################
{
for (s in mksignal mkstatval) {
    Compile $s
    LinkOneObj $s
}

## Signal names for sigmsgs.c, must be done before compiling rc
if (~ $objDir ()) {
    mksignalExe = ./mksignal
    mkstatExe = ./mkstatval
} else {
    mksignalExe = $objDir/mksignal
    mkstatExe = $objDir/mkstatval
}
echo $mksignalExe
$mksignalExe
## Status value defines, must be done before compiling rc
## Making mkstatval does not depend on singals created by mksignal
echo $mkstatExe
$mkstatExe > statval.h

########################################################################################
## CompileWithOpts rc source

if ($AddOn) {
    addon = (addon)
    calc = (calc)
} else {
    addon = ()
    calc = ()
}

sources = (
    $addon
    $calc
    builtins
	develop
    except
    exec
    fn
    footobar
    getopt
    glob
    glom
    hash
    heredoc
    input
    lex
    list
    main
    match
    nalloc
    open
    parse
    print
    redir
    signal
    status
    tree
    utils
    var
    wait
    walk
    which
    sigmsgs
    edit-$Edit
    system
)


########################################################################################
if (~ $objDir ()) {
    rc_objs = $sources^.o
} else {
    rc_objs = $objDir/^$sources^.o
}

########################################################################################
if (whatis byacc >[2] /dev/null) {
    YaccExe = byacc
    calc_opts = (-P)
} else {
    calc_opts = ()
    YaccExe = bison
}
yaccOpts = (-t -v -d)

fn RunYacc { stem = () args = () yFile = () cFile = () hFile = () run = () {

    stem = $1
    shift
    args = $*

    yFile = $stem.y cFile = $stem.c hFile = $stem.h
    run = true

    if ($CheckTime &&
            test -r $cFile -a -r $hFile -a $cFile -nt $yFile -a $hFile -nt $yFile) {
        run = false
    }

    if ($run) {
        cmd = ($YaccExe $yaccOpts $args -o $cFile $yFile)
        echo $cmd
        $cmd
    }
}}

########################################################################################
RunYacc parse
RunYacc calc  $calc_opts  -p calc

########################################################################################
for (s in $sources) {
    Compile $s
}
## Link rc
LinkWithOpts -o rc     $rc_objs

########################################################################################
## Make test (trip)
Compile tripping
LinkOneObj tripping

$COMPILER --version
exit $STATUS
} >[2=1] | tee comp.log

