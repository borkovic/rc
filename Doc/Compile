########################################################################################
# rc script to compile self.
########################################################################################
fn Error { echo >[1=2] $* }
fn Fatal { Error $*; exit 1 }

########################################################################################
FORCE_CLANG=false
FORCE_GCC=false

CLOB=true
Yydebug=false
Yyacc = false

while (! ~ $#* 0) {
    switch(x$1) {
    case x-force-clang  x--force-clang x-clang x--clang
        FORCE_CLANG=true
    case x-force-gcc    x--force-gcc   x-gcc   x--gcc
        FORCE_GCC=true

    case x-noclob* x--noclob*
        CLOB=false

    case x-yydebug x--yydebug
        Yydebug=true
        
    case x-yacc x--yacc
        Yyacc = true

    case --opt 
        OPT=$2

    case x-*
        Fatal Bad option $1
    case *
        break
    }
    shift
}

########################################################################################
AddOn=false
AddOn=true    ## for builtins: let, kill

########################################################################################
# Standard options
if (~ $OPT ()) {
    OptimizationOpts=(-O2)
    OptimizationOpts=(-O3)
    OptimizationOpts=()
} else {
    OptimizationOpts=(-O$OPT)
}

LangOpts=(
    -m32
    '-std=c99'
)

LangOpts=(
    #-m32
    '-std=gnu99'
    -m64
)

CommonOpts = (
    $LangOpts
    $OptimizationOpts
)

########################################################################################
# Security options (stack randomization, etc.)
SecurityCompileOpts=(
    -fPIE
    ## -fstack-protector does not work on older systems (e.g., RedHat 4, 5)
    -fstack-protector
)

SecurityLinkOpts=(
    -pie 
    -Wl,-z,now,-z,relro   ## a single option / no spaces 
)

########################################################################################
# Other options
RegularCompileOpts=(
    -DHAVE_CONFIG_H
    -I.
    -g  
    -MD
    -MP

    -Wall
    -pedantic
    -Wextra -W  ## these options create 'unused param' and 'longjmp clobber variable' warnings
    -Wno-unused-parameter
    # -Werror  ## makes warnings errors
)
if ($Yydebug) {
    RegularCompileOpts=(
        $RegularCompileOpts
        '-DYYDEBUG=1'  ## To compile parsers with debug. In addition at run time must define env variable 'YYDEBUG=1'
    )
}

RegularLinkOpts=(
    -Wall
    -g
)

########################################################################################
# All compile and link options together
CompileOpts = (
    $CommonOpts
    $RegularCompileOpts
    $SecurityCompileOpts
)

LinkOpts=(
    $CommonOpts
    $RegularLinkOpts
    $SecurityLinkOpts
)

########################################################################################
# Clobbering by setjmp/longjmp
if ($CLOB) {
    Clobbered=(
        -Wclobbered
    )
}
if ($FORCE_CLANG) {
    COMPILER=clang
} else if ($FORCE_GCC) {
    COMPILER=gcc
    CompileOpts=(
        $CompileOpts
        $Clobbered
    )
} else if (clang --version >/dev/null >[2]/dev/null) {
    COMPILER=clang
} else {
    CompileOpts=($CompileOpts $Clobbered)
    COMPILER=gcc
}

########################################################################################
# Store object files in a subdir to prevent polution
objDir=obj
if (! ~ $objDir ()) {
    if (! test -d $objDir) {
        mkdir -p $objDir
    }
}
########################################################################################
########################################################################################
fn CompileWithOpts LinkWithOpts { cmd=() securityOpts=() allOpts=() {
    #--------------------------------------------------------------------
    if (~ $0 LinkWithOpts) {
        allOpts = ($LinkOpts)
    } else {
        allOpts = ($CompileOpts)
    }
    #--------------------------------------------------------------------
    cmd = ($COMPILER $allOpts $*)
    echo $cmd
    $cmd
}}

########################################################################################
fn Compile LinkOneObj { f=$1 obj=() {
    if (~ $objDir ()) {
        obj = $f.o
    } else {
        obj=obj/$f.o
    }
    #--------------------------------------------------------------------
    if (~ $0 Compile) {
        CompileWithOpts   -MT $obj -MF .deps/$f.Tpo -c -o $obj $f.c
    } else {
        LinkWithOpts      -o $f $obj  
    }
}}

########################################################################################
########################################################################################


########################################################################################
for (s in mksignal mkstatval) {
    Compile $s
    LinkOneObj $s
}

## Signal names for sigmsgs.c, must be done before compiling rc
./mksignal

## Status value defines, must be done before compiling rc
## Making mkstatval does not depend on singals created by mksignal
./mkstatval > statval.h

########################################################################################
## CompileWithOpts rc source

if ($AddOn) {
    addon=(addon)
    let=(let.tab)
} else {
    addon=()
    let=()
}

sources=(
    $addon
    builtins
    except
    exec
    fn
    footobar
    getopt
    glob
    glom
    hash
    heredoc
    input
    $let
    lex
    list
    main
    match
    nalloc
    open
    parse
    print
    redir
    signal
    status
    tree
    utils
    var
    wait
    walk
    which
    sigmsgs
    edit-null
    system
)


########################################################################################
if (~ $objDir ()) {
    rc_objs = $sources^.o
} else {
    rc_objs = obj/^$sources^.o
}

########################################################################################
if ($Yyacc) {
    yaccOpts = (-t -v -d)
    byacc $yaccOpts -o parse.c parse.y
    if ($AddOn) {
        byacc $yaccOpts -P -b let -p let let.y
    }
}

########################################################################################
for (s in $sources) {
    Compile $s
}
## Link rc
LinkWithOpts -o rc     $rc_objs

########################################################################################
## Make test (trip)
Compile tripping
LinkOneObj tripping


